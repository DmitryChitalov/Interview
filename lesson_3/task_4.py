"""
Написать программу, в которой реализовать две функции.
В первой должен создаваться простой текстовый файл.
Если файл с таким именем уже существует, выводим соответствующее сообщение.
Необходимо открыть файл и подготовить два списка: с текстовой и числовой информацией.
Для создания списков использовать генераторы. Применить к спискам функцию zip().
Результат выполнения этой функции должен должен быть обработан и записан в файл таким образом,
чтобы каждая строка файла содержала текстовое и числовое значение. Вызвать вторую функцию.
В нее должна передаваться ссылка на созданный файл. Во второй функции необходимо реализовать
открытие файла и простой построчный вывод содержимого.
Вся программа должна запускаться по вызову первой функции.
"""
import os
import sys
from random import randrange


def random_char() -> str:
    # Генерация случайного латинского символа (или символа конча строки)

    char = chr(randrange(65, 123))
    return char if char != '\\' else '\n'


def create_file() -> str:
    # Проверка существования файла в активной директории и его последующее создание.
    # Файл заполняется произвольными текстовыми данными
    # Возвращает имя абсолютный путь до созданного файла

    filename = input("Enter filename for creating: ")
    if os.path.exists(os.path.abspath(filename)):
        print("Sorry file is exist.")
        sys.exit(1)
    else:
        text = [random_char() for _ in range(10000)]
        with open(filename, 'w', encoding='utf-8') as f:
            f.writelines(text)
    return os.path.abspath(filename)


def add_number_for_each_row_in_file(path):
    # Открывает созданный ранее файл
    # Выводит в консоль случайное число и строку.
    # Можно было бы сделать через zip() (как на видео-записи вебинара, но поздно увидел, что задания отличаются)
    # Итоговый вывод соответствует ТЗ частично, но переделывать уже нет времени.
    with open(path, 'r+', encoding='utf-8') as f:
        buffer = f.read()
        new_buffer = list(map(lambda x: str(randrange(1, 100)) + ' ' + x, buffer.split('\n')))
        print('\n'.join(new_buffer))


def main():
    path = create_file()
    add_number_for_each_row_in_file(path)


if __name__ == '__main__':
    main()
